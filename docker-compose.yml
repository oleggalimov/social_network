version: "3"


services:

  ####fulL-configuration
  #citus
  #do not change service names because citus manager can't work with it
  master:
    profiles:
      - full
    container_name: citus_master
    image: "citusdata/citus:11.3.0"
    ports: ["${COORDINATOR_EXTERNAL_PORT:-5432}:5432"]
    labels: ["com.citusdata.role=Master"]
    environment: &AUTH
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_user
      PGUSER: postgres
      PGPASSWORD: pass
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    command: ["postgres", "-c", "log_statement=all"]
  manager:
    profiles:
      - full
    container_name: citus_manager
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [master]
    environment: *AUTH
  worker:
    profiles:
      - full
    container_name: citus_worker
    image: "citusdata/citus:11.3.0"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
  worker-2:
    profiles:
      - full
    container_name: citus_worker_2
    image: "citusdata/citus:11.3.0"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - healthcheck-volume:/healthcheck
  rabbitmq:
    profiles:
      - full
    #после старта нужно включить STOMP-плагин и создать exchange (см. Readme).
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
      - 61613:61613
  redis-master:
    profiles:
      - full
    container_name: redis_master
    image: redis:alpine3.18
    ports:
      - "6379:6379"
  tarantool:
    profiles:
      - full
    container_name: tarantool
    image: tarantool/tarantool:2.11.0-ubuntu20.04
    ports:
      - "3301:3301"
    environment:
      - TARANTOOL_USER_NAME=test_user
      - TARANTOOL_USER_PASSWORD=test_password
    volumes:
      - $PWD/volumes/tarantool/:/opt/tarantool
  social-network-dialogs:
    profiles:
      - full
    depends_on:
      - master
    image: social-network-monolith:0.1.0
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=postgres
  social-network-app:
    profiles:
      - full
    depends_on:
      - social-network-dialogs
      - rabbitmq
      - master
      - redis-master
      - tarantool
    image: social-network:0.1.0
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=master
      - REDIS_HOST=redis-master
      - RABBIT_MQ_HOST=rabbitmq
      - TARANTOOL_HOST=tarantool
      - TARANTOOL_PORT=3301
      - TARANTOOL_USER_NAME=test_user
      - TARANTOOL_USER_PASSWORD=test_password

  #####standalone-configuration
  postgres-1:
    image: postgres:15.3-alpine3.18
    profiles:
      - standalone_no_app
      - standalone
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    restart: unless-stopped
  postgres-2:
    image: postgres:15.3-alpine3.18
    profiles:
      - standalone_no_app
#      - standalone
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    restart: unless-stopped
  haproxy:
    depends_on:
      - postgres-1
#      - postgres-2
    image: "haproxy:2.2-alpine"
    ports:
      - "5434:5434"
    volumes:
      - type: bind
        source: ./proxy/haproxy.cfg
        target: /usr/local/etc/haproxy/haproxy.cfg
        read_only: true
  social-network-dialogs-standalone:
    profiles:
      - standalone
    depends_on:
      - haproxy
      - kafka
    image: social-network-dialogs:0.1.0
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=haproxy
      - DATABASE_PORT=5434
      - KAFKA_SERVERS=kafka:9092
  social-network-monolith-standalone-app-1:
    profiles:
      - standalone
    depends_on:
      - social-network-dialogs-standalone
      - haproxy
    image: social-network-monolith:0.1.0
    ports:
      - "8081:8080"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=haproxy
      - DATABASE_PORT=5434
      - GRPC_MESSAGE_CLIENT_HOST=social-network-dialogs-standalone
  social-network-monolith-standalone-app-2:
    profiles:
      - standalone
    depends_on:
      - social-network-dialogs-standalone
      - haproxy
    image: social-network-monolith:0.1.0
    ports:
      - "8084:8080"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=haproxy
      - DATABASE_PORT=5434
      - GRPC_MESSAGE_CLIENT_HOST=social-network-dialogs-standalone
  nginx:
    profiles:
      - standalone
    image: nginx:stable
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "8080:8080"
      - "80:80"
    depends_on:
      - social-network-monolith-standalone-app-1
      - social-network-monolith-standalone-app-2
  zookeeper:
    profiles:
      - standalone_no_app
      - standalone
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  kafka:
    profiles:
      - standalone_no_app
      - standalone
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  social-network-counter:
    profiles:
      - standalone
    depends_on:
      - social-network-dialogs-standalone
      - haproxy
    image: social-network-counter:0.1.0
    ports:
      - "8082:8080"
    restart: unless-stopped
    environment:
      - DATABASE_HOST=haproxy
      - DATABASE_PORT=5434
      - KAFKA_SERVERS=kafka:9092
volumes:
  healthcheck-volume: